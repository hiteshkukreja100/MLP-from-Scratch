# -*- coding: utf-8 -*-
"""MultiLayerPerceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eN2d2ql28Y_WUvSVzEXBg2dNL0Y3k378
"""

import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt

df = pd.read_csv('train.csv')

df.head()

df.describe()

df = np.array(df)

df_test = pd.read_csv('test.csv')

df_test = np.array(df_test)

m,n = df.shape

df_train = df.T
Y_train = df_train[0]
X_train = df_train[1:n]
X_train = X_train/255.

df_test = df_test.T
Y_test = df_test[0]
X_test = df_test[1:n]
X_test = X_test/255.

print(X_test.shape)

def init_params():
  W1 = np.random.rand(10,784) - 0.5
  b1 = np.random.rand(10,1) - 0.5
  W2 = np.random.rand(10,10) - 0.5
  b2 = np.random.rand(10,1) - 0.5
  return W1,b1,W2,b2


def relu(Z):
  return np.maximum(0,Z)


def softmax(Z):
  exp_Z = np.exp(Z - np.max(Z, axis=0, keepdims=True))
  return exp_Z / np.sum(exp_Z, axis=0, keepdims=True)

def forward(W1,b1,W2,b2,X):
  Z1 = W1.dot(X) + b1
  A1 = relu(Z1)
  Z2 = W2.dot(A1) + b2
  A2 = softmax(Z2)
  return Z1,A1,Z2,A2

def encoding(Y):
  Y = Y.astype(int)
  one_hot_Y = np.zeros((Y.size, int(Y.max()) + 1))
  one_hot_Y[np.arange(Y.size), Y] = 1
  return one_hot_Y.T


def deriv_relu(Z):
  return Z > 0


def backward(Z1,A1,Z2,A2,W2,X,Y):
  m = Y.size
  one_hot_Y = encoding(Y)
  dz2 = A2 - one_hot_Y
  dw2 = (1/m) * dz2.dot(A1.T)
  db2 = (1/m) * np.sum(dz2, axis=1, keepdims=True)
  dz1 = W2.T.dot(dz2) * deriv_relu(Z1)
  dw1 = (1/m) * dz1.dot(X.T)
  db1 = (1/m) * np.sum(dz1, axis=1, keepdims=True)
  return dw1, db1, dw2, db2



def update(W1,b1,W2,b2,dw1,db1,dw2,db2,alpha):
  W1 = W1 - alpha*dw1
  W2 = W2 - alpha*dw2
  b1 = b1 - alpha*db1
  b2 = b2 - alpha*db2
  return W1,b1,W2,b2

def get_predictions(A2):
  return np.argmax(A2,0)

def get_accuracy(predictions,Y):
  print(predictions,Y)
  return np.sum(predictions == Y) / Y.size

def gradient_descent(X, Y, epochs, alpha):
    W1, b1, W2, b2 = init_params()
    for i in range(epochs):
        Z1, A1, Z2, A2 = forward(W1, b1, W2, b2, X)
        dw1, db1, dw2, db2 = backward(Z1, A1, Z2, A2, W2, X, Y)
        W1, b1, W2, b2 = update(W1, b1, W2, b2, dw1, db1, dw2, db2, alpha)
        if i % 10 == 0:
            print('Epoch:', i, '/', epochs)
            print('Accuracy:', get_accuracy(get_predictions(A2), Y))
    return W1, b1, W2, b2

W1,b1,W2,b2 = gradient_descent(X_train,Y_train,300,0.1)

def make_predictions(X, W1, b1, W2, b2):
    _, _, _, A2 = forward(W1, b1, W2, b2, X)
    predictions = get_predictions(A2)
    return predictions

def test_prediction(index, W1, b1, W2, b2):
    current_image = X_train[:, index, None]
    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)
    label = Y_train[index]
    print("Prediction: ", prediction)
    print("Label: ", label)

    current_image = current_image.reshape((28, 28)) * 255
    plt.gray()
    plt.imshow(current_image, interpolation='nearest')
    plt.show()

test_prediction(0, W1, b1, W2, b2)
test_prediction(1, W1, b1, W2, b2)
test_prediction(2, W1, b1, W2, b2)
test_prediction(3, W1, b1, W2, b2)



